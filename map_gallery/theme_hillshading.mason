# -*- python -*-
# -*- encoding: utf-8 -*-

version = 'mark1'

title = 'Hillshading'
name = 'hillshading_%s' % version

imageformat = 'WEBP'
extension = '.webp'
parameters = dict(quality=96)

metadata = dict(
        title=title,
        version='Mark I',
        abstract='Patrick USA Hillshading',
        attribution='Map Design: K&R',
        origin_zoom=7,
        origin=(-121.7719958, 46.8550861),
)

THEME = dict(
        name=name,
        metadata=metadata,
        schemas=[]
)


class Selector(object):
    RESOLUTIONS = [
        140000.,
        56000.,
        28000.,
        14000.,
        7000.,
        3500.,
        1820.,
        840.,
        420.,
        210.,
        112.,
        56.,
        28.,
        14.,
        7.,
        3.5000,
        1.4000,
        0.7000,
        0.4200,
        0.2100,
        0.1400,
        0.0700,
        0.0280,
    ]

    def __call__(self, resolution):
        raise NotImplementedError


class ZFactorSelector(Selector):
    def __call__(self, resolution):
        resx, resy = resolution
        if resx > self.RESOLUTIONS[5]:
            z = 50
        if resx > self.RESOLUTIONS[6]:
            z = 6
        if resx > self.RESOLUTIONS[7]:
            z = 3
        elif resx > self.RESOLUTIONS[8]:
            z = 2
        elif resx > self.RESOLUTIONS[9]:
            z = 1.8
        elif resx > self.RESOLUTIONS[10]:
            z = 1.5
        elif resx > self.RESOLUTIONS[11]:
            z = 1.25
        else:
            z = 1

        return z


class ReliefIndexSelector(Selector):
    def __call__(self, resolution):
        # import logging
        # logging.debug('resolution:%r,%r'%resolution)
        resx, resy = resolution
        if resx > self.RESOLUTIONS[7]:
            index = 'raster+s3http://stonemason-tokyo/geodata/Production/SRTM30PLUS/srtm30?indexname=index.shp'
        elif resx > self.RESOLUTIONS[12]:
            index = 'raster+s3http://stonemason-tokyo/geodata/Production/Patrick?indexname=ned30m.shp'
        elif resx > self.RESOLUTIONS[14]:
            index = 'raster+s3http://stonemason-tokyo/geodata/Production/Patrick?indexname=ned10m.shp'
        else:
            index = 'raster+s3http://stonemason-tokyo/geodata/Production/Patrick?indexname=ned3m.shp'
        return index


storage = dict(
        prototype='s3.metatile',
        stride=8,
        bucket='stonemason-tokyo',
        key_mode='hilbert',
        prefix='tilestorage/Patrick/%s/hillshading' % version
)

schema = dict(
        tag=extension,

        pyramid=dict(
                stride=1,
                geogcs='WGS84',
                projcs='EPSG:3857',
                levels=range(4, 17),
        ),

        maptype='image',
        tileformat=dict(format=imageformat, parameters=parameters),
        storage=storage,
        renderer={

            'prototype': 'image',
            'layers': {

                'reliefmap': {
                    'prototype': 'image.input.relief.swiss',
                    'datasource': ReliefIndexSelector(),
                    'scale': 1,
                    'buffer': 8,
                    'zfactor': ZFactorSelector(),
                    'azimuth': 315,
                    'altitude': (35, 40, 81),
                    'high_relief_cutoff': 0.68,
                    'high_relief_gain': 7.1,
                    'low_relief_cutoff': 0.72,
                    'low_relief_gain': 1.4,
                    'height_mask_range': (0, 1850),
                    'blend': (0.65, 0.75),
                },

                'colormap': {
                    'prototype': 'image.input.relief.color',
                    'datasource': 'raster+s3http://stonemason-tokyo/geodata/Production/NaturalEarth/RASTER10M/NE1_HR_LC?indexname=index.shp',
                    'buffer': 8,
                },

                # 'overlay': {
                #     'prototype': 'mapnik',
                #     'style_sheet': '{{ theme_root }}/carto/patrick.xml',
                #     'base_path': '{{ theme_root }}/carto',
                #     'default_scale': scale,
                #     'buffer_size': 256 * scale
                # },

                'root': {
                    'prototype': 'image.composite.imagemagick',
                    'sources': [
                        'reliefmap',
                        'colormap',
                        # 'overlay'
                    ],
                    'command': '''
                    (
                        # simulate sun illulmation by applying a color map
                        <<reliefmap>> -set colorspace RGB
                        ( {{ theme_root }}/carto/res/Stage/tint.png ) -clut
                    )

                    ( <<colormap>>
                        -modulate 100,72,96
                        -brightness-contrast -8%x-26%
                        -set colorspace RGB
                    ) -compose Overlay -composite

                    # compress tonal range
                    +level 4%,98%,1
                    -sharpen 0.5

                    # <<overlay>> -compose Over -composite

                    -define png:color-type=6
                '''
                },

            }
        }
)

THEME['schemas'].append(schema)
